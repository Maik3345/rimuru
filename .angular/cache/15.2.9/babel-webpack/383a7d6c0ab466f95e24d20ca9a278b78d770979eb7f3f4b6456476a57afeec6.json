{"ast":null,"code":"'use strict';\n\nvar CodePointAt = require('./CodePointAt');\nvar isInteger = require('../helpers/isInteger');\nvar MAX_SAFE_INTEGER = require('../helpers/maxSafeInteger');\nvar $TypeError = require('es-errors/type');\n\n// https://262.ecma-international.org/12.0/#sec-advancestringindex\n\nmodule.exports = function AdvanceStringIndex(S, index, unicode) {\n  if (typeof S !== 'string') {\n    throw new $TypeError('Assertion failed: `S` must be a String');\n  }\n  if (!isInteger(index) || index < 0 || index > MAX_SAFE_INTEGER) {\n    throw new $TypeError('Assertion failed: `length` must be an integer >= 0 and <= 2**53');\n  }\n  if (typeof unicode !== 'boolean') {\n    throw new $TypeError('Assertion failed: `unicode` must be a Boolean');\n  }\n  if (!unicode) {\n    return index + 1;\n  }\n  var length = S.length;\n  if (index + 1 >= length) {\n    return index + 1;\n  }\n  var cp = CodePointAt(S, index);\n  return index + cp['[[CodeUnitCount]]'];\n};","map":{"version":3,"names":["CodePointAt","require","isInteger","MAX_SAFE_INTEGER","$TypeError","module","exports","AdvanceStringIndex","S","index","unicode","length","cp"],"sources":["/Users/michael.restrepo/code/personal/web-components/rimuru/node_modules/es-abstract/2023/AdvanceStringIndex.js"],"sourcesContent":["'use strict';\n\nvar CodePointAt = require('./CodePointAt');\n\nvar isInteger = require('../helpers/isInteger');\nvar MAX_SAFE_INTEGER = require('../helpers/maxSafeInteger');\n\nvar $TypeError = require('es-errors/type');\n\n// https://262.ecma-international.org/12.0/#sec-advancestringindex\n\nmodule.exports = function AdvanceStringIndex(S, index, unicode) {\n\tif (typeof S !== 'string') {\n\t\tthrow new $TypeError('Assertion failed: `S` must be a String');\n\t}\n\tif (!isInteger(index) || index < 0 || index > MAX_SAFE_INTEGER) {\n\t\tthrow new $TypeError('Assertion failed: `length` must be an integer >= 0 and <= 2**53');\n\t}\n\tif (typeof unicode !== 'boolean') {\n\t\tthrow new $TypeError('Assertion failed: `unicode` must be a Boolean');\n\t}\n\tif (!unicode) {\n\t\treturn index + 1;\n\t}\n\tvar length = S.length;\n\tif ((index + 1) >= length) {\n\t\treturn index + 1;\n\t}\n\tvar cp = CodePointAt(S, index);\n\treturn index + cp['[[CodeUnitCount]]'];\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAe,CAAC;AAE1C,IAAIC,SAAS,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AAC/C,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,2BAA2B,CAAC;AAE3D,IAAIG,UAAU,GAAGH,OAAO,CAAC,gBAAgB,CAAC;;AAE1C;;AAEAI,MAAM,CAACC,OAAO,GAAG,SAASC,kBAAkBA,CAACC,CAAC,EAAEC,KAAK,EAAEC,OAAO,EAAE;EAC/D,IAAI,OAAOF,CAAC,KAAK,QAAQ,EAAE;IAC1B,MAAM,IAAIJ,UAAU,CAAC,wCAAwC,CAAC;EAC/D;EACA,IAAI,CAACF,SAAS,CAACO,KAAK,CAAC,IAAIA,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAGN,gBAAgB,EAAE;IAC/D,MAAM,IAAIC,UAAU,CAAC,iEAAiE,CAAC;EACxF;EACA,IAAI,OAAOM,OAAO,KAAK,SAAS,EAAE;IACjC,MAAM,IAAIN,UAAU,CAAC,+CAA+C,CAAC;EACtE;EACA,IAAI,CAACM,OAAO,EAAE;IACb,OAAOD,KAAK,GAAG,CAAC;EACjB;EACA,IAAIE,MAAM,GAAGH,CAAC,CAACG,MAAM;EACrB,IAAKF,KAAK,GAAG,CAAC,IAAKE,MAAM,EAAE;IAC1B,OAAOF,KAAK,GAAG,CAAC;EACjB;EACA,IAAIG,EAAE,GAAGZ,WAAW,CAACQ,CAAC,EAAEC,KAAK,CAAC;EAC9B,OAAOA,KAAK,GAAGG,EAAE,CAAC,mBAAmB,CAAC;AACvC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}