{"ast":null,"code":"'use strict';\n\nvar Call = require('es-abstract/2023/Call');\nvar Get = require('es-abstract/2023/Get');\nvar GetMethod = require('es-abstract/2023/GetMethod');\nvar IsRegExp = require('es-abstract/2023/IsRegExp');\nvar ToString = require('es-abstract/2023/ToString');\nvar RequireObjectCoercible = require('es-abstract/2023/RequireObjectCoercible');\nvar callBound = require('call-bind/callBound');\nvar hasSymbols = require('has-symbols')();\nvar flagsGetter = require('regexp.prototype.flags');\nvar $indexOf = callBound('String.prototype.indexOf');\nvar regexpMatchAllPolyfill = require('./polyfill-regexp-matchall');\nvar getMatcher = function getMatcher(regexp) {\n  // eslint-disable-line consistent-return\n  var matcherPolyfill = regexpMatchAllPolyfill();\n  if (hasSymbols && typeof Symbol.matchAll === 'symbol') {\n    var matcher = GetMethod(regexp, Symbol.matchAll);\n    if (matcher === RegExp.prototype[Symbol.matchAll] && matcher !== matcherPolyfill) {\n      return matcherPolyfill;\n    }\n    return matcher;\n  }\n  // fallback for pre-Symbol.matchAll environments\n  if (IsRegExp(regexp)) {\n    return matcherPolyfill;\n  }\n};\nmodule.exports = function matchAll(regexp) {\n  var O = RequireObjectCoercible(this);\n  if (typeof regexp !== 'undefined' && regexp !== null) {\n    var isRegExp = IsRegExp(regexp);\n    if (isRegExp) {\n      // workaround for older engines that lack RegExp.prototype.flags\n      var flags = 'flags' in regexp ? Get(regexp, 'flags') : flagsGetter(regexp);\n      RequireObjectCoercible(flags);\n      if ($indexOf(ToString(flags), 'g') < 0) {\n        throw new TypeError('matchAll requires a global regular expression');\n      }\n    }\n    var matcher = getMatcher(regexp);\n    if (typeof matcher !== 'undefined') {\n      return Call(matcher, regexp, [O]);\n    }\n  }\n  var S = ToString(O);\n  // var rx = RegExpCreate(regexp, 'g');\n  var rx = new RegExp(regexp, 'g');\n  return Call(getMatcher(rx), rx, [S]);\n};","map":{"version":3,"names":["Call","require","Get","GetMethod","IsRegExp","ToString","RequireObjectCoercible","callBound","hasSymbols","flagsGetter","$indexOf","regexpMatchAllPolyfill","getMatcher","regexp","matcherPolyfill","Symbol","matchAll","matcher","RegExp","prototype","module","exports","O","isRegExp","flags","TypeError","S","rx"],"sources":["/Users/michael.restrepo/code/personal/web-components/rimuru/node_modules/string.prototype.matchall/implementation.js"],"sourcesContent":["'use strict';\n\nvar Call = require('es-abstract/2023/Call');\nvar Get = require('es-abstract/2023/Get');\nvar GetMethod = require('es-abstract/2023/GetMethod');\nvar IsRegExp = require('es-abstract/2023/IsRegExp');\nvar ToString = require('es-abstract/2023/ToString');\nvar RequireObjectCoercible = require('es-abstract/2023/RequireObjectCoercible');\nvar callBound = require('call-bind/callBound');\nvar hasSymbols = require('has-symbols')();\nvar flagsGetter = require('regexp.prototype.flags');\n\nvar $indexOf = callBound('String.prototype.indexOf');\n\nvar regexpMatchAllPolyfill = require('./polyfill-regexp-matchall');\n\nvar getMatcher = function getMatcher(regexp) { // eslint-disable-line consistent-return\n\tvar matcherPolyfill = regexpMatchAllPolyfill();\n\tif (hasSymbols && typeof Symbol.matchAll === 'symbol') {\n\t\tvar matcher = GetMethod(regexp, Symbol.matchAll);\n\t\tif (matcher === RegExp.prototype[Symbol.matchAll] && matcher !== matcherPolyfill) {\n\t\t\treturn matcherPolyfill;\n\t\t}\n\t\treturn matcher;\n\t}\n\t// fallback for pre-Symbol.matchAll environments\n\tif (IsRegExp(regexp)) {\n\t\treturn matcherPolyfill;\n\t}\n};\n\nmodule.exports = function matchAll(regexp) {\n\tvar O = RequireObjectCoercible(this);\n\n\tif (typeof regexp !== 'undefined' && regexp !== null) {\n\t\tvar isRegExp = IsRegExp(regexp);\n\t\tif (isRegExp) {\n\t\t\t// workaround for older engines that lack RegExp.prototype.flags\n\t\t\tvar flags = 'flags' in regexp ? Get(regexp, 'flags') : flagsGetter(regexp);\n\t\t\tRequireObjectCoercible(flags);\n\t\t\tif ($indexOf(ToString(flags), 'g') < 0) {\n\t\t\t\tthrow new TypeError('matchAll requires a global regular expression');\n\t\t\t}\n\t\t}\n\n\t\tvar matcher = getMatcher(regexp);\n\t\tif (typeof matcher !== 'undefined') {\n\t\t\treturn Call(matcher, regexp, [O]);\n\t\t}\n\t}\n\n\tvar S = ToString(O);\n\t// var rx = RegExpCreate(regexp, 'g');\n\tvar rx = new RegExp(regexp, 'g');\n\treturn Call(getMatcher(rx), rx, [S]);\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,IAAI,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAC3C,IAAIC,GAAG,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AACzC,IAAIE,SAAS,GAAGF,OAAO,CAAC,4BAA4B,CAAC;AACrD,IAAIG,QAAQ,GAAGH,OAAO,CAAC,2BAA2B,CAAC;AACnD,IAAII,QAAQ,GAAGJ,OAAO,CAAC,2BAA2B,CAAC;AACnD,IAAIK,sBAAsB,GAAGL,OAAO,CAAC,yCAAyC,CAAC;AAC/E,IAAIM,SAAS,GAAGN,OAAO,CAAC,qBAAqB,CAAC;AAC9C,IAAIO,UAAU,GAAGP,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;AACzC,IAAIQ,WAAW,GAAGR,OAAO,CAAC,wBAAwB,CAAC;AAEnD,IAAIS,QAAQ,GAAGH,SAAS,CAAC,0BAA0B,CAAC;AAEpD,IAAII,sBAAsB,GAAGV,OAAO,CAAC,4BAA4B,CAAC;AAElE,IAAIW,UAAU,GAAG,SAASA,UAAUA,CAACC,MAAM,EAAE;EAAE;EAC9C,IAAIC,eAAe,GAAGH,sBAAsB,CAAC,CAAC;EAC9C,IAAIH,UAAU,IAAI,OAAOO,MAAM,CAACC,QAAQ,KAAK,QAAQ,EAAE;IACtD,IAAIC,OAAO,GAAGd,SAAS,CAACU,MAAM,EAAEE,MAAM,CAACC,QAAQ,CAAC;IAChD,IAAIC,OAAO,KAAKC,MAAM,CAACC,SAAS,CAACJ,MAAM,CAACC,QAAQ,CAAC,IAAIC,OAAO,KAAKH,eAAe,EAAE;MACjF,OAAOA,eAAe;IACvB;IACA,OAAOG,OAAO;EACf;EACA;EACA,IAAIb,QAAQ,CAACS,MAAM,CAAC,EAAE;IACrB,OAAOC,eAAe;EACvB;AACD,CAAC;AAEDM,MAAM,CAACC,OAAO,GAAG,SAASL,QAAQA,CAACH,MAAM,EAAE;EAC1C,IAAIS,CAAC,GAAGhB,sBAAsB,CAAC,IAAI,CAAC;EAEpC,IAAI,OAAOO,MAAM,KAAK,WAAW,IAAIA,MAAM,KAAK,IAAI,EAAE;IACrD,IAAIU,QAAQ,GAAGnB,QAAQ,CAACS,MAAM,CAAC;IAC/B,IAAIU,QAAQ,EAAE;MACb;MACA,IAAIC,KAAK,GAAG,OAAO,IAAIX,MAAM,GAAGX,GAAG,CAACW,MAAM,EAAE,OAAO,CAAC,GAAGJ,WAAW,CAACI,MAAM,CAAC;MAC1EP,sBAAsB,CAACkB,KAAK,CAAC;MAC7B,IAAId,QAAQ,CAACL,QAAQ,CAACmB,KAAK,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE;QACvC,MAAM,IAAIC,SAAS,CAAC,+CAA+C,CAAC;MACrE;IACD;IAEA,IAAIR,OAAO,GAAGL,UAAU,CAACC,MAAM,CAAC;IAChC,IAAI,OAAOI,OAAO,KAAK,WAAW,EAAE;MACnC,OAAOjB,IAAI,CAACiB,OAAO,EAAEJ,MAAM,EAAE,CAACS,CAAC,CAAC,CAAC;IAClC;EACD;EAEA,IAAII,CAAC,GAAGrB,QAAQ,CAACiB,CAAC,CAAC;EACnB;EACA,IAAIK,EAAE,GAAG,IAAIT,MAAM,CAACL,MAAM,EAAE,GAAG,CAAC;EAChC,OAAOb,IAAI,CAACY,UAAU,CAACe,EAAE,CAAC,EAAEA,EAAE,EAAE,CAACD,CAAC,CAAC,CAAC;AACrC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}