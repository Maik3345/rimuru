{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/michael.restrepo/code/personal/web-components/rimuru/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst Queue = require('yocto-queue');\nconst pLimit = concurrency => {\n  if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {\n    throw new TypeError('Expected `concurrency` to be a number from 1 and up');\n  }\n  const queue = new Queue();\n  let activeCount = 0;\n  const next = () => {\n    activeCount--;\n    if (queue.size > 0) {\n      queue.dequeue()();\n    }\n  };\n  const run = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (fn, resolve, ...args) {\n      activeCount++;\n      const result = _asyncToGenerator(function* () {\n        return fn(...args);\n      })();\n      resolve(result);\n      try {\n        yield result;\n      } catch {}\n      next();\n    });\n    return function run(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  const enqueue = (fn, resolve, ...args) => {\n    queue.enqueue(run.bind(null, fn, resolve, ...args));\n    _asyncToGenerator(function* () {\n      // This function needs to wait until the next microtask before comparing\n      // `activeCount` to `concurrency`, because `activeCount` is updated asynchronously\n      // when the run function is dequeued and called. The comparison in the if-statement\n      // needs to happen asynchronously as well to get an up-to-date value for `activeCount`.\n      yield Promise.resolve();\n      if (activeCount < concurrency && queue.size > 0) {\n        queue.dequeue()();\n      }\n    })();\n  };\n  const generator = (fn, ...args) => new Promise(resolve => {\n    enqueue(fn, resolve, ...args);\n  });\n  Object.defineProperties(generator, {\n    activeCount: {\n      get: () => activeCount\n    },\n    pendingCount: {\n      get: () => queue.size\n    },\n    clearQueue: {\n      value: () => {\n        queue.clear();\n      }\n    }\n  });\n  return generator;\n};\nmodule.exports = pLimit;","map":{"version":3,"names":["_asyncToGenerator","require","default","Queue","pLimit","concurrency","Number","isInteger","Infinity","TypeError","queue","activeCount","next","size","dequeue","run","_ref","fn","resolve","args","result","_x","_x2","apply","arguments","enqueue","bind","Promise","generator","Object","defineProperties","get","pendingCount","clearQueue","value","clear","module","exports"],"sources":["/Users/michael.restrepo/code/personal/web-components/rimuru/node_modules/p-limit/index.js"],"sourcesContent":["'use strict';\nconst Queue = require('yocto-queue');\n\nconst pLimit = concurrency => {\n\tif (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {\n\t\tthrow new TypeError('Expected `concurrency` to be a number from 1 and up');\n\t}\n\n\tconst queue = new Queue();\n\tlet activeCount = 0;\n\n\tconst next = () => {\n\t\tactiveCount--;\n\n\t\tif (queue.size > 0) {\n\t\t\tqueue.dequeue()();\n\t\t}\n\t};\n\n\tconst run = async (fn, resolve, ...args) => {\n\t\tactiveCount++;\n\n\t\tconst result = (async () => fn(...args))();\n\n\t\tresolve(result);\n\n\t\ttry {\n\t\t\tawait result;\n\t\t} catch {}\n\n\t\tnext();\n\t};\n\n\tconst enqueue = (fn, resolve, ...args) => {\n\t\tqueue.enqueue(run.bind(null, fn, resolve, ...args));\n\n\t\t(async () => {\n\t\t\t// This function needs to wait until the next microtask before comparing\n\t\t\t// `activeCount` to `concurrency`, because `activeCount` is updated asynchronously\n\t\t\t// when the run function is dequeued and called. The comparison in the if-statement\n\t\t\t// needs to happen asynchronously as well to get an up-to-date value for `activeCount`.\n\t\t\tawait Promise.resolve();\n\n\t\t\tif (activeCount < concurrency && queue.size > 0) {\n\t\t\t\tqueue.dequeue()();\n\t\t\t}\n\t\t})();\n\t};\n\n\tconst generator = (fn, ...args) => new Promise(resolve => {\n\t\tenqueue(fn, resolve, ...args);\n\t});\n\n\tObject.defineProperties(generator, {\n\t\tactiveCount: {\n\t\t\tget: () => activeCount\n\t\t},\n\t\tpendingCount: {\n\t\t\tget: () => queue.size\n\t\t},\n\t\tclearQueue: {\n\t\t\tvalue: () => {\n\t\t\t\tqueue.clear();\n\t\t\t}\n\t\t}\n\t});\n\n\treturn generator;\n};\n\nmodule.exports = pLimit;\n"],"mappings":"AAAA,YAAY;;AAAC,IAAAA,iBAAA,GAAAC,OAAA,mKAAAC,OAAA;AACb,MAAMC,KAAK,GAAGF,OAAO,CAAC,aAAa,CAAC;AAEpC,MAAMG,MAAM,GAAGC,WAAW,IAAI;EAC7B,IAAI,EAAE,CAACC,MAAM,CAACC,SAAS,CAACF,WAAW,CAAC,IAAIA,WAAW,KAAKG,QAAQ,KAAKH,WAAW,GAAG,CAAC,CAAC,EAAE;IACtF,MAAM,IAAII,SAAS,CAAC,qDAAqD,CAAC;EAC3E;EAEA,MAAMC,KAAK,GAAG,IAAIP,KAAK,CAAC,CAAC;EACzB,IAAIQ,WAAW,GAAG,CAAC;EAEnB,MAAMC,IAAI,GAAGA,CAAA,KAAM;IAClBD,WAAW,EAAE;IAEb,IAAID,KAAK,CAACG,IAAI,GAAG,CAAC,EAAE;MACnBH,KAAK,CAACI,OAAO,CAAC,CAAC,CAAC,CAAC;IAClB;EACD,CAAC;EAED,MAAMC,GAAG;IAAA,IAAAC,IAAA,GAAAhB,iBAAA,CAAG,WAAOiB,EAAE,EAAEC,OAAO,EAAE,GAAGC,IAAI,EAAK;MAC3CR,WAAW,EAAE;MAEb,MAAMS,MAAM,GAAGpB,iBAAA,CAAC;QAAA,OAAYiB,EAAE,CAAC,GAAGE,IAAI,CAAC;MAAA,GAAE,CAAC;MAE1CD,OAAO,CAACE,MAAM,CAAC;MAEf,IAAI;QACH,MAAMA,MAAM;MACb,CAAC,CAAC,MAAM,CAAC;MAETR,IAAI,CAAC,CAAC;IACP,CAAC;IAAA,gBAZKG,GAAGA,CAAAM,EAAA,EAAAC,GAAA;MAAA,OAAAN,IAAA,CAAAO,KAAA,OAAAC,SAAA;IAAA;EAAA,GAYR;EAED,MAAMC,OAAO,GAAGA,CAACR,EAAE,EAAEC,OAAO,EAAE,GAAGC,IAAI,KAAK;IACzCT,KAAK,CAACe,OAAO,CAACV,GAAG,CAACW,IAAI,CAAC,IAAI,EAAET,EAAE,EAAEC,OAAO,EAAE,GAAGC,IAAI,CAAC,CAAC;IAEnDnB,iBAAA,CAAC,aAAY;MACZ;MACA;MACA;MACA;MACA,MAAM2B,OAAO,CAACT,OAAO,CAAC,CAAC;MAEvB,IAAIP,WAAW,GAAGN,WAAW,IAAIK,KAAK,CAACG,IAAI,GAAG,CAAC,EAAE;QAChDH,KAAK,CAACI,OAAO,CAAC,CAAC,CAAC,CAAC;MAClB;IACD,CAAC,EAAE,CAAC;EACL,CAAC;EAED,MAAMc,SAAS,GAAGA,CAACX,EAAE,EAAE,GAAGE,IAAI,KAAK,IAAIQ,OAAO,CAACT,OAAO,IAAI;IACzDO,OAAO,CAACR,EAAE,EAAEC,OAAO,EAAE,GAAGC,IAAI,CAAC;EAC9B,CAAC,CAAC;EAEFU,MAAM,CAACC,gBAAgB,CAACF,SAAS,EAAE;IAClCjB,WAAW,EAAE;MACZoB,GAAG,EAAEA,CAAA,KAAMpB;IACZ,CAAC;IACDqB,YAAY,EAAE;MACbD,GAAG,EAAEA,CAAA,KAAMrB,KAAK,CAACG;IAClB,CAAC;IACDoB,UAAU,EAAE;MACXC,KAAK,EAAEA,CAAA,KAAM;QACZxB,KAAK,CAACyB,KAAK,CAAC,CAAC;MACd;IACD;EACD,CAAC,CAAC;EAEF,OAAOP,SAAS;AACjB,CAAC;AAEDQ,MAAM,CAACC,OAAO,GAAGjC,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}