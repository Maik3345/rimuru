{"ast":null,"code":"'use strict';\n\nvar inspect = require('object-inspect');\nvar $TypeError = require('es-errors/type');\nvar Call = require('./Call');\nvar Get = require('./Get');\nvar GetIterator = require('./GetIterator');\nvar IsCallable = require('./IsCallable');\nvar IteratorClose = require('./IteratorClose');\nvar IteratorStep = require('./IteratorStep');\nvar IteratorValue = require('./IteratorValue');\nvar ThrowCompletion = require('./ThrowCompletion');\nvar Type = require('./Type');\n\n// https://262.ecma-international.org/14.0/#sec-add-entries-from-iterable\n\nmodule.exports = function AddEntriesFromIterable(target, iterable, adder) {\n  if (!IsCallable(adder)) {\n    throw new $TypeError('Assertion failed: `adder` is not callable');\n  }\n  if (iterable == null) {\n    throw new $TypeError('Assertion failed: `iterable` is present, and not nullish');\n  }\n  var iteratorRecord = GetIterator(iterable, 'sync');\n  while (true) {\n    // eslint-disable-line no-constant-condition\n    var next = IteratorStep(iteratorRecord);\n    if (!next) {\n      return target;\n    }\n    var nextItem = IteratorValue(next);\n    if (Type(nextItem) !== 'Object') {\n      var error = ThrowCompletion(new $TypeError('iterator next must return an Object, got ' + inspect(nextItem)));\n      return IteratorClose(iteratorRecord, error);\n    }\n    try {\n      var k = Get(nextItem, '0');\n      var v = Get(nextItem, '1');\n      Call(adder, target, [k, v]);\n    } catch (e) {\n      return IteratorClose(iteratorRecord, ThrowCompletion(e));\n    }\n  }\n};","map":{"version":3,"names":["inspect","require","$TypeError","Call","Get","GetIterator","IsCallable","IteratorClose","IteratorStep","IteratorValue","ThrowCompletion","Type","module","exports","AddEntriesFromIterable","target","iterable","adder","iteratorRecord","next","nextItem","error","k","v","e"],"sources":["/Users/michael.restrepo/code/personal/web-components/rimuru/node_modules/es-abstract/2023/AddEntriesFromIterable.js"],"sourcesContent":["'use strict';\n\nvar inspect = require('object-inspect');\n\nvar $TypeError = require('es-errors/type');\n\nvar Call = require('./Call');\nvar Get = require('./Get');\nvar GetIterator = require('./GetIterator');\nvar IsCallable = require('./IsCallable');\nvar IteratorClose = require('./IteratorClose');\nvar IteratorStep = require('./IteratorStep');\nvar IteratorValue = require('./IteratorValue');\nvar ThrowCompletion = require('./ThrowCompletion');\nvar Type = require('./Type');\n\n// https://262.ecma-international.org/14.0/#sec-add-entries-from-iterable\n\nmodule.exports = function AddEntriesFromIterable(target, iterable, adder) {\n\tif (!IsCallable(adder)) {\n\t\tthrow new $TypeError('Assertion failed: `adder` is not callable');\n\t}\n\tif (iterable == null) {\n\t\tthrow new $TypeError('Assertion failed: `iterable` is present, and not nullish');\n\t}\n\tvar iteratorRecord = GetIterator(iterable, 'sync');\n\twhile (true) { // eslint-disable-line no-constant-condition\n\t\tvar next = IteratorStep(iteratorRecord);\n\t\tif (!next) {\n\t\t\treturn target;\n\t\t}\n\t\tvar nextItem = IteratorValue(next);\n\t\tif (Type(nextItem) !== 'Object') {\n\t\t\tvar error = ThrowCompletion(new $TypeError('iterator next must return an Object, got ' + inspect(nextItem)));\n\t\t\treturn IteratorClose(iteratorRecord, error);\n\t\t}\n\t\ttry {\n\t\t\tvar k = Get(nextItem, '0');\n\t\t\tvar v = Get(nextItem, '1');\n\t\t\tCall(adder, target, [k, v]);\n\t\t} catch (e) {\n\t\t\treturn IteratorClose(iteratorRecord, ThrowCompletion(e));\n\t\t}\n\t}\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,OAAO,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAEvC,IAAIC,UAAU,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAE1C,IAAIE,IAAI,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAC5B,IAAIG,GAAG,GAAGH,OAAO,CAAC,OAAO,CAAC;AAC1B,IAAII,WAAW,GAAGJ,OAAO,CAAC,eAAe,CAAC;AAC1C,IAAIK,UAAU,GAAGL,OAAO,CAAC,cAAc,CAAC;AACxC,IAAIM,aAAa,GAAGN,OAAO,CAAC,iBAAiB,CAAC;AAC9C,IAAIO,YAAY,GAAGP,OAAO,CAAC,gBAAgB,CAAC;AAC5C,IAAIQ,aAAa,GAAGR,OAAO,CAAC,iBAAiB,CAAC;AAC9C,IAAIS,eAAe,GAAGT,OAAO,CAAC,mBAAmB,CAAC;AAClD,IAAIU,IAAI,GAAGV,OAAO,CAAC,QAAQ,CAAC;;AAE5B;;AAEAW,MAAM,CAACC,OAAO,GAAG,SAASC,sBAAsBA,CAACC,MAAM,EAAEC,QAAQ,EAAEC,KAAK,EAAE;EACzE,IAAI,CAACX,UAAU,CAACW,KAAK,CAAC,EAAE;IACvB,MAAM,IAAIf,UAAU,CAAC,2CAA2C,CAAC;EAClE;EACA,IAAIc,QAAQ,IAAI,IAAI,EAAE;IACrB,MAAM,IAAId,UAAU,CAAC,0DAA0D,CAAC;EACjF;EACA,IAAIgB,cAAc,GAAGb,WAAW,CAACW,QAAQ,EAAE,MAAM,CAAC;EAClD,OAAO,IAAI,EAAE;IAAE;IACd,IAAIG,IAAI,GAAGX,YAAY,CAACU,cAAc,CAAC;IACvC,IAAI,CAACC,IAAI,EAAE;MACV,OAAOJ,MAAM;IACd;IACA,IAAIK,QAAQ,GAAGX,aAAa,CAACU,IAAI,CAAC;IAClC,IAAIR,IAAI,CAACS,QAAQ,CAAC,KAAK,QAAQ,EAAE;MAChC,IAAIC,KAAK,GAAGX,eAAe,CAAC,IAAIR,UAAU,CAAC,2CAA2C,GAAGF,OAAO,CAACoB,QAAQ,CAAC,CAAC,CAAC;MAC5G,OAAOb,aAAa,CAACW,cAAc,EAAEG,KAAK,CAAC;IAC5C;IACA,IAAI;MACH,IAAIC,CAAC,GAAGlB,GAAG,CAACgB,QAAQ,EAAE,GAAG,CAAC;MAC1B,IAAIG,CAAC,GAAGnB,GAAG,CAACgB,QAAQ,EAAE,GAAG,CAAC;MAC1BjB,IAAI,CAACc,KAAK,EAAEF,MAAM,EAAE,CAACO,CAAC,EAAEC,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC,OAAOC,CAAC,EAAE;MACX,OAAOjB,aAAa,CAACW,cAAc,EAAER,eAAe,CAACc,CAAC,CAAC,CAAC;IACzD;EACD;AACD,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}