{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.array.map.js\";\n\n/* eslint-disable no-case-declarations */\nvar isLiteral = function isLiteral(type) {\n  return type.name === 'literal';\n};\nvar toEnumOption = function toEnumOption(element) {\n  return element.value.replace(/['|\"]/g, '');\n};\nvar convertSig = function convertSig(type) {\n  switch (type.type) {\n    case 'function':\n      return {\n        name: 'function'\n      };\n    case 'object':\n      var values = {};\n      type.signature.properties.forEach(function (prop) {\n        values[prop.key] = convert(prop.value);\n      });\n      return {\n        name: 'object',\n        value: values\n      };\n    default:\n      throw new Error(\"Unknown: \".concat(type));\n  }\n};\nexport var convert = function convert(type) {\n  var name = type.name,\n    raw = type.raw;\n  var base = {};\n  if (typeof raw !== 'undefined') base.raw = raw;\n  switch (type.name) {\n    case 'literal':\n      return Object.assign({}, base, {\n        name: 'other',\n        value: type.value\n      });\n    case 'string':\n    case 'number':\n    case 'symbol':\n    case 'boolean':\n      {\n        return Object.assign({}, base, {\n          name: name\n        });\n      }\n    case 'Array':\n      {\n        return Object.assign({}, base, {\n          name: 'array',\n          value: type.elements.map(convert)\n        });\n      }\n    case 'signature':\n      return Object.assign({}, base, convertSig(type));\n    case 'union':\n      if (type.elements.every(isLiteral)) {\n        return Object.assign({}, base, {\n          name: 'enum',\n          value: type.elements.map(toEnumOption)\n        });\n      }\n      return Object.assign({}, base, {\n        name: name,\n        value: type.elements.map(convert)\n      });\n    case 'intersection':\n      return Object.assign({}, base, {\n        name: name,\n        value: type.elements.map(convert)\n      });\n    default:\n      return Object.assign({}, base, {\n        name: 'other',\n        value: name\n      });\n  }\n};","map":{"version":3,"names":["isLiteral","type","name","toEnumOption","element","value","replace","convertSig","values","signature","properties","forEach","prop","key","convert","Error","concat","raw","base","Object","assign","elements","map","every"],"sources":["/Users/michael.restrepo/code/personal/web-components/rimuru/node_modules/@storybook/docs-tools/dist/esm/argTypes/convert/flow/convert.js"],"sourcesContent":["import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.array.map.js\";\n\n/* eslint-disable no-case-declarations */\nvar isLiteral = function isLiteral(type) {\n  return type.name === 'literal';\n};\n\nvar toEnumOption = function toEnumOption(element) {\n  return element.value.replace(/['|\"]/g, '');\n};\n\nvar convertSig = function convertSig(type) {\n  switch (type.type) {\n    case 'function':\n      return {\n        name: 'function'\n      };\n\n    case 'object':\n      var values = {};\n      type.signature.properties.forEach(function (prop) {\n        values[prop.key] = convert(prop.value);\n      });\n      return {\n        name: 'object',\n        value: values\n      };\n\n    default:\n      throw new Error(\"Unknown: \".concat(type));\n  }\n};\n\nexport var convert = function convert(type) {\n  var name = type.name,\n      raw = type.raw;\n  var base = {};\n  if (typeof raw !== 'undefined') base.raw = raw;\n\n  switch (type.name) {\n    case 'literal':\n      return Object.assign({}, base, {\n        name: 'other',\n        value: type.value\n      });\n\n    case 'string':\n    case 'number':\n    case 'symbol':\n    case 'boolean':\n      {\n        return Object.assign({}, base, {\n          name: name\n        });\n      }\n\n    case 'Array':\n      {\n        return Object.assign({}, base, {\n          name: 'array',\n          value: type.elements.map(convert)\n        });\n      }\n\n    case 'signature':\n      return Object.assign({}, base, convertSig(type));\n\n    case 'union':\n      if (type.elements.every(isLiteral)) {\n        return Object.assign({}, base, {\n          name: 'enum',\n          value: type.elements.map(toEnumOption)\n        });\n      }\n\n      return Object.assign({}, base, {\n        name: name,\n        value: type.elements.map(convert)\n      });\n\n    case 'intersection':\n      return Object.assign({}, base, {\n        name: name,\n        value: type.elements.map(convert)\n      });\n\n    default:\n      return Object.assign({}, base, {\n        name: 'other',\n        value: name\n      });\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}